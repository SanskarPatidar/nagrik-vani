# This is the display name of the workflow, which will appear in the GitHub Actions UI.
name: Build and Deploy API Gateway 

# This section defines the events that trigger the workflow to run.
on:
  push:
    branches: [ "main" ]
    # Specifies that the workflow should only run if files change in the specified paths.
    # This prevents the API Gateway from being rebuilt and redeployed if changes are made to other microservices.
    paths:
      - 'api-gateway/**'          # Trigger when files in the api-gateway source folder change.
      - 'pom.xml'               # Trigger when the root pom.xml file changes (e.g., dependency updates).
      - docker-compose.yaml

# 'jobs' defines one or more tasks that the workflow will execute, runs in parallel by default
jobs:
  # 'build-and-deploy' is the unique ID for this job.
  build-and-deploy:
    # Specifies the type of virtual machine the job will run on. 'ubuntu-latest' is a standard Linux environment.
    runs-on: ubuntu-latest

    # 'steps' is a sequence of tasks that will be executed in order for this job.
    steps:
      # Step 1: Download the repository's code onto the runner.
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Load settings.xml from GitHub Secrets to root dir
      - name: Prepare Maven Settings
        run: |
          # Decode and save to file in the repo root (build context)
          echo "${{ secrets.MAVEN_SETTINGS_XML }}" | base64 -d > settings.xml

      # Step 3: Log to my docker account
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 4: Set up Docker Buildx.
      # This is a best-practice step that enables more advanced and efficient Docker build features.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 5: This single step builds the image and pushes it to Docker Hub.
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          # The context is the root of the repository.
          context: .
          # Specifies the path to this service's Dockerfile.
          file: ./api-gateway/Dockerfile
          # Tells the action to push after a successful build.
          push: true
          # A list of dynamic tags for traceability.
          # latest(convention) always points to the most recently successful build
          # github.sha is in-build commit hash for traceability
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest 
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:0.0.1-SNAPSHOT
          build-args: |
            MODULE_DIR=api-gateway
          # Enables caching between workflows
          cache-from: type=gha # can use scope tag to segregate single workflow multi cache system
          cache-to: type=gha,mode=max

